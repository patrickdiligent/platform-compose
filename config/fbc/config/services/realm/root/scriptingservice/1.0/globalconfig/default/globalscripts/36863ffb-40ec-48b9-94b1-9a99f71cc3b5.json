{
  "metadata" : {
    "realm" : null,
    "entityType" : "ScriptingService",
    "entityId" : "default/globalScripts/36863ffb-40ec-48b9-94b1-9a99f71cc3b5",
    "uid" : "ou=36863ffb-40ec-48b9-94b1-9a99f71cc3b5,ou=globalScripts,ou=default,ou=GlobalConfig,ou=1.0,ou=ScriptingService,ou=services,ou=am-config",
    "sunServiceID" : "globalScript",
    "objectClass" : [
      "top",
      "sunServiceComponent"
    ],
    "pathParams" : { },
    "ou" : [
      "36863ffb-40ec-48b9-94b1-9a99f71cc3b5"
    ]
  },
  "data" : {
    "_id" : "default/globalScripts/36863ffb-40ec-48b9-94b1-9a99f71cc3b5",
    "_type" : {
      "_id" : "ScriptingService",
      "name" : "ScriptingService",
      "collection" : false
    },
    "createdBy" : "null",
    "lastModifiedDate" : "0",
    "lastModifiedBy" : "null",
    "name" : "OIDC Claims Script",
    "context" : "OIDC_CLAIMS",
    "description" : "Default global script for OIDC claims",
    "language" : "GROOVY",
    "creationDate" : "0",
    "script" : ""
  }
}
