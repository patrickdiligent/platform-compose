{
  "metadata" : {
    "realm" : "/",
    "entityType" : "ScriptingService",
    "entityId" : "default/scriptConfigurations/d68f4c1a-4862-4aea-8b55-dc347c405715",
    "uid" : "ou=d68f4c1a-4862-4aea-8b55-dc347c405715,ou=scriptConfigurations,ou=default,ou=OrganizationConfig,ou=1.0,ou=ScriptingService,ou=services,ou=am-config",
    "sunServiceID" : "scriptConfiguration",
    "objectClass" : [ "sunServiceComponent", "top" ],
    "pathParams" : { },
    "ou" : [ "d68f4c1a-4862-4aea-8b55-dc347c405715" ]
  },
  "data" : {
    "_id" : "default/scriptConfigurations/d68f4c1a-4862-4aea-8b55-dc347c405715",
    "_type" : {
      "_id" : "ScriptingService",
      "name" : "ScriptingService",
      "collection" : false
    },
    "createdBy" : "null",
    "evaluatorVersion" : "V1_0",
    "creationDate" : "0",
    "language" : "JAVASCRIPT",
    "script" : "/*\n * Copyright 2019-2023 ForgeRock AS. All Rights Reserved.\n *\n * Use of this code requires a commercial software license with ForgeRock AS\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\n/*\n * This script lets you modify information associated with an OAuth2 access token\n * with methods provided by the AccessToken (1) interface.\n * The changes made to OAuth2 access tokens will directly impact the size of the CTS tokens,\n * and, similarly, the size of the JWTs if client-based OAuth2 tokens are utilized.\n * When adding/updating fields make sure that the token size remains within client/user-agent limits.\n *\n * Defined variables:\n * accessToken - AccessToken (1).\n *               The access token to be updated.\n *               Mutable object, all changes to the access token will be reflected.\n * scopes - Set<String> (6).\n *          Always present, the requested scopes.\n * requestProperties - Unmodifiable Map (5).\n *                     Always present, contains a map of request properties:\n *                     requestUri - The request URI.\n *                     realm - The realm that the request relates to.\n *                     requestParams - A map of the request params and/or posted data.\n *                                     Each value is a list of one or more properties.\n *                                     Please note that these should be handled in accordance with OWASP best practices:\n *                                     https://owasp.org/www-community/vulnerabilities/Unsafe_use_of_Reflection.\n * clientProperties - Unmodifiable Map (5).\n *                    Present if the client specified in the request was identified, contains a map of client properties:\n *                    clientId - The client's URI for the request locale.\n *                    allowedGrantTypes - List of the allowed grant types (org.forgerock.oauth2.core.GrantType) for the client.\n *                    allowedResponseTypes - List of the allowed response types for the client.\n *                    allowedScopes - List of the allowed scopes for the client.\n *                    customProperties - A map of the custom properties of the client.\n *                                       Lists or maps will be included as sub-maps; for example:\n *                                       customMap[Key1]=Value1 will be returned as customMap -> Key1 -> Value1.\n *                                       To add custom properties to a client, update the Custom Properties field\n *                                       in AM Console > Realm Name > Applications > OAuth 2.0 > Clients > Client ID > Advanced.\n * identity - AMIdentity (3).\n *            Always present, the identity of the resource owner.\n * session - SSOToken (4).\n *           Present if the request contains the session cookie, the user's session object.\n * scriptName - String (primitive).\n *              Always present, the display name of the script.\n * logger - Always present, the \"OAuth2Provider\" debug logger instance:\n *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.\n *          Corresponding log files will be prefixed with: scripts.OAUTH2_ACCESS_TOKEN_MODIFICATION.\n * httpClient - HTTP Client (8).\n *              Always present, the HTTP Client instance:\n *              https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-http-client.html#scripting-api-global-http-client.\n *\n * Return - no value is expected, changes shall be made to the accessToken parameter directly.\n *\n * Class reference:\n * (1) AccessToken - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/AccessToken.html.\n * (3) AMIdentity - https://backstage.forgerock.com/docs/am/7/apidocs/com/sun/identity/idm/AMIdentity.html.\n * (4) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.\n * (5) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashMap.html,\n *           or https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedHashMap.html.\n * (6) Set - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashSet.html.\n * (8) Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.\n */\n\n/* EXAMPLE\n(function () {\n    var frJava = JavaImporter(\n        org.forgerock.http.protocol.Request,\n        org.forgerock.http.protocol.Response\n    );\n\n    // Always includes this field in the token.\n    accessToken.setField('key1', 'value1');\n\n    // Receives and adds to the access token additional values by performing a REST call to an external service.\n    // WARNING: Below, you will find a reference to a third-party site, which is provided only as an example.\n    var uri = 'https://jsonplaceholder.typicode.com/posts';\n\n    try {\n        var request = new frJava.Request();\n\n        // You can chain methods that return the request object.\n        request.setUri(uri)\n            .setMethod('POST')\n            .setEntity(JSON.stringify({\n                updatedFields: {\n                    key2: 'value2',\n                    key3: 'value3'\n                }\n            }));\n\n        // You can call a method when chaining is not possible.\n        request.getHeaders().add('Content-Type', 'application/json; charset=UTF-8');\n\n        // Sends the request and receives the response.\n        var response = httpClient.send(request).getOrThrow();\n\n        // Checks if the response status is as expected.\n        if (response.getStatus() === org.forgerock.http.protocol.Status.CREATED) {\n            var result = JSON.parse(response.getEntity().getString());\n\n            // Set multiple token fields at once.\n            accessToken.setFields(result.updatedFields);\n        } else {\n            logger.error('Unable to obtain access token modifications. Status: ' + response.getStatus() + '. Content: ' + response.getEntity().getString());\n        }\n    } catch (e) {\n        logger.error('The request processing was interrupted. ' + e);\n\n        // The access token request fails with the HTTP 500 error in this case.\n        throw ('Unable to obtain response from: ' + uri);\n    }\n\n    // Adds new fields containing identity attribute values to the access token.\n    accessToken.setField('mail', identity.getAttribute('mail'));\n    accessToken.setField('phone', identity.getAttribute('telephoneNumber').toArray()[0]);\n\n    // Adds new fields containing the session property values.\n    // NOTE: session may not be available for non-interactive authorization grants.\n    if (session) {\n        try {\n            accessToken.setField('ipAddress', session.getProperty('Host'));\n        } catch (e) {\n            logger.error('Unable to retrieve session property value. ' + e);\n        }\n    }\n\n    // Removes a native field from the token entry, that was set by AM.\n    // WARNING: removing native fields from the token may result in loss of functionality.\n    // accessToken.removeTokenName()\n\n    // No return value is expected. Let it be undefined.\n}());\n*/\naccessToken.setField('userroles', identity.getAttribute('userroles').toArray());\n",
    "description" : null,
    "lastModifiedBy" : "null",
    "context" : "OAUTH2_ACCESS_TOKEN_MODIFICATION",
    "lastModifiedDate" : "0",
    "name" : "partner-client access token modification"
  }
}